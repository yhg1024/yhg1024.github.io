/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.81
 * Generated at: 2023-11-15 03:14:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.login.dto.BoardDto;

public final class view_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.login.dto.BoardDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		window.onload = function(){\r\n");
      out.write("			// 화면이 모두 불러들여져 오면 실행합니다.\r\n");
      out.write("			let listBtn = document.querySelector(\"#listBtn\");\r\n");
      out.write("			// 리스트 버튼이 화면에 존재하면, 이벤트를 추가\r\n");
      out.write("			if(listBtn != null) {\r\n");
      out.write("				listBtn.onclick = function(){\r\n");
      out.write("					// 리스트 페이지로 이동\r\n");
      out.write("					location.href = '/list';\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			// 확인후 삭제컨트롤러를 호출\r\n");
      out.write("			// 삭제 성공 -> 리스트페이지 호출\r\n");
      out.write("			// 삭제 실패 -> '삭제중 예외가 발생 되었습니다.' 메세지 출력후 -> 상세페이지(뒤로가기)\r\n");
      out.write("			let deleteBtn = document.querySelector(\"#deleteBtn\");\r\n");
      out.write("			// 삭제 버튼을 클릭하면 '정말 삭제하시겠습니까?' 메세지 출력\r\n");
      out.write("			if(deleteBtn != null) {\r\n");
      out.write("				deleteBtn.addEventListener('click', function(){\r\n");
      out.write("					deletFun();\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			let editBtn = document.querySelector(\"#editBtn\");\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 게시글을 삭제합니다.\r\n");
      out.write("		function deletFun() {\r\n");
      out.write("			// 컨펌창 : 확인, 취소 버튼이 출력\r\n");
      out.write("			// 확인 = true를 반환, 취소 = false를 반환\r\n");
      out.write("			if(confirm('정말 삭제하시겠습니까?')){\r\n");
      out.write("				// 버튼을 클릭하면 삭제 컨트롤러를 요청\r\n");
      out.write("				viewFrom.action='/delete';\r\n");
      out.write("				viewFrom.submit(); // submit은 함수라 실행하려면 () 필요\r\n");
      out.write("			} else {\r\n");
      out.write("				alert('취소 클릭');\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("	<h2>상세 보기</h2>\r\n");
      out.write("	요청게시글 번호 : ");
      out.print( request.getParameter("num") );
      out.write("<br>\r\n");
      out.write("	boardDto : ");
      out.print( request.getAttribute("boardDto") );
      out.write("<br> \r\n");
      out.write("	<form method=\"post\" name=\"viewFrom\">\r\n");
      out.write("		<input type=\"text\" name=\"num\" value=\"");
      out.print( request.getParameter("num") );
      out.write("\">\r\n");
      out.write("	</form>\r\n");
      out.write("	<button id=\"listBtn\">리스트</button>\r\n");
      out.write("	<!-- 글의 작성자만 수정, 삭제가 가능합니다.\r\n");
      out.write("		게시글의 id가 로그인한 id와 동일 하다면 수정, 삭제 버튼 보여주기 -->\r\n");
      out.write("		\r\n");
      out.write("	");
 
		if(request.getAttribute("boardDto") != null) {
			BoardDto dto = (BoardDto)request.getAttribute("boardDto");
			String userId = "";
			if(session.getAttribute("userId") != null) {
				userId = session.getAttribute("userId").toString();
				if(userId.equals(dto.getId())) {
					out.print("<button id='deleteBtn'>삭제</button> ");
					out.print("");
					out.print("<button id='editBtn'>수정</button>");
				}
		}
		
	
      out.write("\r\n");
      out.write("	<ul>\r\n");
      out.write("		<li>제목 : ");
      out.print( dto.getTitle() );
      out.write("</li>\r\n");
      out.write("		<li>내용 : ");
      out.print( dto.getContent() );
      out.write("</li>\r\n");
      out.write("		<li>작성자 : ");
      out.print( dto.getId() );
      out.write("</li>\r\n");
      out.write("		<li>작성일 : ");
      out.print( dto.getPostdate() );
      out.write("</li>\r\n");
      out.write("		<li>조회수 : ");
      out.print( dto.getVisitcount() );
      out.write("</li>\r\n");
      out.write("	</ul>\r\n");
      out.write("	");
 } 
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
